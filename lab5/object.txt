-- Moving Object Display 
library 	ieee;
use 		ieee.std_logic_1164.all;
use  		ieee.numeric_std.all;

entity object is
port( pixel_row, pixel_column : in  unsigned(9 downto 0);
      red,green,blue          : out std_logic;
      vert_sync               : in  std_logic);
end ball;

architecture behavior of object is
    -- Video Display Signals   
    signal ball_on, direction     : std_logic;
    signal size                   : signed(9 downto 0);  
    signal ball_y_motion          : signed(9 downto 0);
    signal ball_y_pos, ball_x_pos : signed(9 downto 0);
begin           
    size       <= to_signed(8,10);
    ball_x_pos <= to_signed(320,10);
	
    -- Colors for pixel data on video signal
    red <=  '1';
    -- Turn off Green and Blue when displaying ball (red "ball" on white background)
    green <= not ball_on;
    blue <=  not ball_on;	

    rgb_display: process(ball_x_pos, ball_y_pos, pixel_column, pixel_row, size)
    begin
      -- Set Ball_on ='1' to display ball
      if (ball_x_pos <= signed(pixel_column) + size) and (ball_x_pos + size >= signed(pixel_column)) and
         (ball_y_pos <= signed(pixel_row)    + size) and (ball_y_pos + size >= signed(pixel_row)) then
            ball_on <= '1';
      else
        ball_on <= '0';
      end if;
    end process rgb_display;	

    move_ball: process(vert_sync)
    begin
      -- Move ball once every vertical sync
      if rising_edge(vert_sync) then
        -- Bounce off top or bottom of screen
        if (ball_y_pos) >= 480 - size then
          ball_y_motion <= to_signed(-2,10);
        elsif ball_y_pos <= size then
          ball_y_motion <= to_signed(2,10);
        end if;
        -- Compute next ball Y position
        ball_y_pos <= ball_y_pos + ball_y_motion;
      end if;		
    end process move_ball;

end behavior;