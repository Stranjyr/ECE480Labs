(define (a # item $) (eval (quote lambda) (x) $ item #))
(a 1 (quote (+ x x)))
(define (a # $x item $) (eval (quote lambda (x) $ item #)))
(define (a # $x item $) (eval (quote lambda ($x) $ item #)))
(a i 1 (+ 1 1))
(define (a # $x item $) (eval (list (quote lambda) (quote ($x)) (quote $) (quote item) (quote #))))
(a i 1 (+ i i))
(define (a # $x item $) (eval (list (quote lambda) (quote ($x)) (quote $) (quote item) #)))
(a i 1 (+ i i))
(define (a # $x item $) (eval (list (quote lambda) (quote ($x)) (quote $) (quote item)) #))
(define (a # $x item $) (eval (list (quote lambda) (quote ($x) (quote $) (quote item)) #)))
(define (a # $x item $) (eval (list (quote lambda) (quote ($x)) (quote $) (quote item)) #))
(a i 1 (+ i i))
(define b (a i 1 (+ i i)) (b 1))
(define b (a i 1 (+ i i)))
(b 1)
(define (a # $x item $) (define (f (cons (quote lambda) (cons (quote ($x)) (quote $))))) (eval ((f) item) #))
(a i 1 (+ i i))
(define (a # $x item $) (define (f (cons (quote lambda) (cons (quote ($x)) (cons (quote $) nil))))) (eval ((f) item) #))
(a i 1 (+ i i))
(define (a $) (inspect $))
(a (+ 1 2 3))
(a + 1 2 3)
(define (a # $) (eval $ #))
(a + 1 2 3)
(define (a # $) (eval (cons (quote +) $) #))
(a 1 2 3)
(define (a # $i $) (define (f) (list (quote lambda) $i $)) (eval f #))
(a x (+ x x))
((a x (+ x x)))
(((a x (+ x x))) 1)
(eval ((a x (+ x x))) 1)
(lambda (x) (+ x x))
(lambda (x) (+ x x))
1
((lambda (x) (+ x x)) 1)
(define f (lambda (x) (+ x x)))
(define f lambda (x) (+ x x))
(define f (quote lambda) (x) (+ x x))
f
(define f (lambda (x) (+ x x)))
(f 1)
(define (a # $x item $) (define (f (list (quote lambda) (list $x) $)) (eval (f) item #)))
(define (a # $x item $) (define (f (list (quote lambda) (list $x) $))) (eval (f) item #))
(a $i 1 (+ i i))
(define (a # $x item $) (define (f (quote (list (quote lambda) (list $x) $)))) f)
(a i 1 (+ i i))
(quote (list ((quote lambda) (quote (list (quote i))) (quote (list + i i)))))
(define f (quote (list ((quote lambda) (quote (list (quote i))) (quote (list + i i))))))
f
(eval f #)
(eval f this)
(define f (list ((quote lambda) (quote (list (quote i))) (quote (list + i i)))))
(define f (list ((quote lambda) (quote (list (quote i))) (quote (list + i i)))))
(define f (list ((quote lambda) (list (quote i)) (list + i i))))
(list ((quote lambda) (list (quote i)) (list + i i)))
